[{"C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\index.js":"1","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\App.js":"2","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\Body\\Body.js":"3","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\Editor\\Editor.js":"4","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\InputControl\\InputControl.js":"5","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\Resume\\Resume.js":"6","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\Header\\Header.js":"7","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\index.js":"8","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\App.js":"9","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\Header\\Header.js":"10","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\Body\\Body.js":"11","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\Editor\\Editor.js":"12","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\Resume\\Resume.js":"13","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\InputControl\\InputControl.js":"14","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\UserSign\\SignIn.js":"15","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\UserSign\\Register.js":"16","W:\\FYP\\resume assisted\\src\\index.js":"17","W:\\FYP\\resume assisted\\src\\App.js":"18","W:\\FYP\\resume assisted\\src\\components\\Header\\Header.js":"19","W:\\FYP\\resume assisted\\src\\components\\Body\\Body.js":"20","W:\\FYP\\resume assisted\\src\\components\\UserSign\\SignIn.js":"21","W:\\FYP\\resume assisted\\src\\components\\UserSign\\Register.js":"22","W:\\FYP\\resume assisted\\src\\components\\Editor\\Editor.js":"23","W:\\FYP\\resume assisted\\src\\components\\Resume\\Resume.js":"24","W:\\FYP\\resume assisted\\src\\components\\InputControl\\InputControl.js":"25","W:\\FYP\\resume assisted\\src\\components\\adminlogin\\admin.js":"26"},{"size":218,"mtime":1654376065149,"results":"27","hashOfConfig":"28"},{"size":269,"mtime":1654453695165,"results":"29","hashOfConfig":"28"},{"size":2726,"mtime":1654452968913,"results":"30","hashOfConfig":"28"},{"size":20342,"mtime":1654376065234,"results":"31","hashOfConfig":"28"},{"size":299,"mtime":1654376065305,"results":"32","hashOfConfig":"28"},{"size":11041,"mtime":1654376065341,"results":"33","hashOfConfig":"28"},{"size":0,"mtime":1654453580747,"results":"34","hashOfConfig":"28"},{"size":218,"mtime":1654698420184,"results":"35","hashOfConfig":"36"},{"size":753,"mtime":1655124726858,"results":"37","hashOfConfig":"36"},{"size":585,"mtime":1654698420270,"results":"38","hashOfConfig":"36"},{"size":2717,"mtime":1654700373110,"results":"39","hashOfConfig":"36"},{"size":19039,"mtime":1654875535071,"results":"40","hashOfConfig":"36"},{"size":10984,"mtime":1654764148154,"results":"41","hashOfConfig":"36"},{"size":358,"mtime":1654763574569,"results":"42","hashOfConfig":"36"},{"size":936,"mtime":1655124867895,"results":"43","hashOfConfig":"36"},{"size":1151,"mtime":1655124879094,"results":"44","hashOfConfig":"36"},{"size":218,"mtime":1654698420184,"results":"45","hashOfConfig":"46"},{"size":888,"mtime":1655274311178,"results":"47","hashOfConfig":"46"},{"size":585,"mtime":1654698420270,"results":"48","hashOfConfig":"46"},{"size":2717,"mtime":1654700373110,"results":"49","hashOfConfig":"46"},{"size":930,"mtime":1655203323659,"results":"50","hashOfConfig":"46"},{"size":1776,"mtime":1655468028481,"results":"51","hashOfConfig":"46"},{"size":19039,"mtime":1654875535071,"results":"52","hashOfConfig":"46"},{"size":10984,"mtime":1654764148154,"results":"53","hashOfConfig":"46"},{"size":358,"mtime":1654763574569,"results":"54","hashOfConfig":"46"},{"size":536,"mtime":1655126375364,"results":"55","hashOfConfig":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"6jcb7n",{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1pwl5np",{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qbqsx2",{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j62dq9","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\index.js",[],["124","125"],"C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\App.js",[],"C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\Body\\Body.js",[],"C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\Editor\\Editor.js",["126","127","128","129"],"import React, { useEffect, useState } from \"react\";\nimport { X } from \"react-feather\";\n\nimport InputControl from \"../InputControl/InputControl\";\n\nimport styles from \"./Editor.module.css\";\n\nfunction Editor(props) {\n  const sections = props.sections;\n  const information = props.information;\n\n  const [activeSectionKey, setActiveSectionKey] = useState(\n    Object.keys(sections)[0]\n  );\n  const [activeInformation, setActiveInformation] = useState(\n    information[sections[Object.keys(sections)[0]]]\n  );\n  const [activeDetailIndex, setActiveDetailIndex] = useState(0);\n  const [sectionTitle, setSectionTitle] = useState(\n    sections[Object.keys(sections)[0]]\n  );\n  const [values, setValues] = useState({\n    name: activeInformation?.detail?.name || \"\",\n    title: activeInformation?.detail?.title || \"\",\n    linkedin: activeInformation?.detail?.linkedin || \"\",\n    github: activeInformation?.detail?.github || \"\",\n    phone: activeInformation?.detail?.phone || \"\",\n    email: activeInformation?.detail?.email || \"\",\n  });\n\n  const handlePointUpdate = (value, index) => {\n    const tempValues = { ...values };\n    if (!Array.isArray(tempValues.points)) tempValues.points = [];\n    tempValues.points[index] = value;\n    setValues(tempValues);\n  };\n\n  const workExpBody = (\n    <div className={styles.detail}>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Title\"\n          placeholder=\"Enter title eg. Frontend developer\"\n          value={values.title}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, title: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Company Name\"\n          placeholder=\"Enter company name eg. amazon\"\n          value={values.companyName}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, companyName: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Certificate Link\"\n          placeholder=\"Enter certificate link\"\n          value={values.certificationLink}\n          onChange={(event) =>\n            setValues((prev) => ({\n              ...prev,\n              certificationLink: event.target.value,\n            }))\n          }\n        />\n        <InputControl\n          label=\"Location\"\n          placeholder=\"Enter location eg. Remote\"\n          value={values.location}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, location: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Start Date\"\n          type=\"date\"\n          placeholder=\"Enter start date of work\"\n          value={values.startDate}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, startDate: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"End Date\"\n          type=\"date\"\n          placeholder=\"Enter end date of work\"\n          value={values.endDate}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, endDate: event.target.value }))\n          }\n        />\n      </div>\n\n      <div className={styles.column}>\n        <label>Enter work description</label>\n        <InputControl\n          placeholder=\"Line 1\"\n          value={values.points ? values.points[0] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\n        />\n        <InputControl\n          placeholder=\"Line 2\"\n          value={values.points ? values.points[1] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\n        />\n        <InputControl\n          placeholder=\"Line 3\"\n          value={values.points ? values.points[2] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\n        />\n      </div>\n    </div>\n  );\n  const projectBody = (\n    <div className={styles.detail}>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Title\"\n          value={values.title}\n          placeholder=\"Enter title eg. Chat app\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, title: event.target.value }))\n          }\n        />\n      </div>\n      <InputControl\n        label=\"Overview\"\n        value={values.overview}\n        placeholder=\"Enter basic overview of project\"\n        onChange={(event) =>\n          setValues((prev) => ({ ...prev, overview: event.target.value }))\n        }\n      />\n      <div className={styles.row}>\n        <InputControl\n          label=\"Deployed Link\"\n          value={values.link}\n          placeholder=\"Enter deployed link of project\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, link: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Github Link\"\n          value={values.github}\n          placeholder=\"Enter github link of project\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, github: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.column}>\n        <label>Enter project description</label>\n        <InputControl\n          placeholder=\"Line 1\"\n          value={values.points ? values.points[0] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\n        />\n        <InputControl\n          placeholder=\"Line 2\"\n          value={values.points ? values.points[1] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\n        />\n        <InputControl\n          placeholder=\"Line 3\"\n          value={values.points ? values.points[2] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\n        />\n        <InputControl\n          placeholder=\"Line 4\"\n          value={values.points ? values.points[3] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 3)}\n        />\n      </div>\n    </div>\n  );\n  const educationBody = (\n    <div className={styles.detail}>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Title\"\n          value={values.title}\n          placeholder=\"Enter title eg. B-tech\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, title: event.target.value }))\n          }\n        />\n      </div>\n      <InputControl\n        label=\"College/School Name\"\n        value={values.college}\n        placeholder=\"Enter name of your college/school\"\n        onChange={(event) =>\n          setValues((prev) => ({ ...prev, college: event.target.value }))\n        }\n      />\n      <div className={styles.row}>\n        <InputControl\n          label=\"Start Date\"\n          type=\"date\"\n          placeholder=\"Enter start date of this education\"\n          value={values.startDate}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, startDate: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"End Date\"\n          type=\"date\"\n          placeholder=\"Enter end date of this education\"\n          value={values.endDate}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, endDate: event.target.value }))\n          }\n        />\n      </div>\n    </div>\n  );\n  const basicInfoBody = (\n    <div className={styles.detail}>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Name\"\n          placeholder=\"Enter your full name eg. Aashu\"\n          value={values.name}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, name: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Title\"\n          value={values.title}\n          placeholder=\"Enter your title eg. Frontend developer\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, title: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Linkedin Link\"\n          value={values.linkedin}\n          placeholder=\"Enter your linkedin profile link\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, linkedin: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Github Link\"\n          value={values.github}\n          placeholder=\"Enter your github profile link\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, github: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Email\"\n          value={values.email}\n          placeholder=\"Enter your email\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, email: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Enter phone\"\n          value={values.phone}\n          placeholder=\"Enter your phone number\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, phone: event.target.value }))\n          }\n        />\n      </div>\n    </div>\n  );\n  const achievementsBody = (\n    <div className={styles.detail}>\n      <div className={styles.column}>\n        <label>List your achievements</label>\n        <InputControl\n          placeholder=\"Line 1\"\n          value={values.points ? values.points[0] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\n        />\n        <InputControl\n          placeholder=\"Line 2\"\n          value={values.points ? values.points[1] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\n        />\n        <InputControl\n          placeholder=\"Line 3\"\n          value={values.points ? values.points[2] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\n        />\n        <InputControl\n          placeholder=\"Line 4\"\n          value={values.points ? values.points[3] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 3)}\n        />\n      </div>\n    </div>\n  );\n  const summaryBody = (\n    <div className={styles.detail}>\n      <InputControl\n        label=\"Summary\"\n        value={values.summary}\n        placeholder=\"Enter your objective/summary\"\n        onChange={(event) =>\n          setValues((prev) => ({ ...prev, summary: event.target.value }))\n        }\n      />\n    </div>\n  );\n  const otherBody = (\n    <div className={styles.detail}>\n      <InputControl\n        label=\"Other\"\n        value={values.other}\n        placeholder=\"Enter something\"\n        onChange={(event) =>\n          setValues((prev) => ({ ...prev, other: event.target.value }))\n        }\n      />\n    </div>\n  );\n\n  const generateBody = () => {\n    switch (sections[activeSectionKey]) {\n      case sections.basicInfo:\n        return basicInfoBody;\n      case sections.workExp:\n        return workExpBody;\n      case sections.project:\n        return projectBody;\n      case sections.education:\n        return educationBody;\n      case sections.achievement:\n        return achievementsBody;\n      case sections.summary:\n        return summaryBody;\n      case sections.other:\n        return otherBody;\n      default:\n        return null;\n    }\n  };\n\n  const handleSubmission = () => {\n    switch (sections[activeSectionKey]) {\n      case sections.basicInfo: {\n        const tempDetail = {\n          name: values.name,\n          title: values.title,\n          linkedin: values.linkedin,\n          github: values.github,\n          email: values.email,\n          phone: values.phone,\n        };\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.basicInfo]: {\n            ...prev[sections.basicInfo],\n            detail: tempDetail,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.workExp: {\n        const tempDetail = {\n          certificationLink: values.certificationLink,\n          title: values.title,\n          startDate: values.startDate,\n          endDate: values.endDate,\n          companyName: values.companyName,\n          location: values.location,\n          points: values.points,\n        };\n        const tempDetails = [...information[sections.workExp]?.details];\n        tempDetails[activeDetailIndex] = tempDetail;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.workExp]: {\n            ...prev[sections.workExp],\n            details: tempDetails,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.project: {\n        const tempDetail = {\n          link: values.link,\n          title: values.title,\n          overview: values.overview,\n          github: values.github,\n          points: values.points,\n        };\n        const tempDetails = [...information[sections.project]?.details];\n        tempDetails[activeDetailIndex] = tempDetail;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.project]: {\n            ...prev[sections.project],\n            details: tempDetails,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.education: {\n        const tempDetail = {\n          title: values.title,\n          college: values.college,\n          startDate: values.startDate,\n          endDate: values.endDate,\n        };\n        const tempDetails = [...information[sections.education]?.details];\n        tempDetails[activeDetailIndex] = tempDetail;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.education]: {\n            ...prev[sections.education],\n            details: tempDetails,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.achievement: {\n        const tempPoints = values.points;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.achievement]: {\n            ...prev[sections.achievement],\n            points: tempPoints,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.summary: {\n        const tempDetail = values.summary;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.summary]: {\n            ...prev[sections.summary],\n            detail: tempDetail,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.other: {\n        const tempDetail = values.other;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.other]: {\n            ...prev[sections.other],\n            detail: tempDetail,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n    }\n  };\n\n  const handleAddNew = () => {\n    const details = activeInformation?.details;\n    if (!details) return;\n    const lastDetail = details.slice(-1)[0];\n    if (!Object.keys(lastDetail).length) return;\n    details?.push({});\n\n    props.setInformation((prev) => ({\n      ...prev,\n      [sections[activeSectionKey]]: {\n        ...information[sections[activeSectionKey]],\n        details: details,\n      },\n    }));\n    setActiveDetailIndex(details?.length - 1);\n  };\n\n  const handleDeleteDetail = (index) => {\n    const details = activeInformation?.details\n      ? [...activeInformation?.details]\n      : \"\";\n    if (!details) return;\n    details.splice(index, 1);\n    props.setInformation((prev) => ({\n      ...prev,\n      [sections[activeSectionKey]]: {\n        ...information[sections[activeSectionKey]],\n        details: details,\n      },\n    }));\n\n    setActiveDetailIndex((prev) => (prev === index ? 0 : prev - 1));\n  };\n\n  useEffect(() => {\n    const activeInfo = information[sections[activeSectionKey]];\n    setActiveInformation(activeInfo);\n    setSectionTitle(sections[activeSectionKey]);\n    setActiveDetailIndex(0);\n    setValues({\n      name: activeInfo?.detail?.name || \"\",\n      overview: activeInfo?.details\n        ? activeInfo.details[0]?.overview || \"\"\n        : \"\",\n      link: activeInfo?.details ? activeInfo.details[0]?.link || \"\" : \"\",\n      certificationLink: activeInfo?.details\n        ? activeInfo.details[0]?.certificationLink || \"\"\n        : \"\",\n      companyName: activeInfo?.details\n        ? activeInfo.details[0]?.companyName || \"\"\n        : \"\",\n      college: activeInfo?.details\n        ? activeInfo.details[0]?.college || \"\"\n        : \"\",\n      location: activeInfo?.details\n        ? activeInfo.details[0]?.location || \"\"\n        : \"\",\n      startDate: activeInfo?.details\n        ? activeInfo.details[0]?.startDate || \"\"\n        : \"\",\n      endDate: activeInfo?.details ? activeInfo.details[0]?.endDate || \"\" : \"\",\n      points: activeInfo?.details\n        ? activeInfo.details[0]?.points\n          ? [...activeInfo.details[0]?.points]\n          : \"\"\n        : activeInfo?.points\n        ? [...activeInfo.points]\n        : \"\",\n      title: activeInfo?.details\n        ? activeInfo.details[0]?.title || \"\"\n        : activeInfo?.detail?.title || \"\",\n      linkedin: activeInfo?.detail?.linkedin || \"\",\n      github: activeInfo?.details\n        ? activeInfo.details[0]?.github || \"\"\n        : activeInfo?.detail?.github || \"\",\n      phone: activeInfo?.detail?.phone || \"\",\n      email: activeInfo?.detail?.email || \"\",\n      summary: typeof activeInfo?.detail !== \"object\" ? activeInfo.detail : \"\",\n      other: typeof activeInfo?.detail !== \"object\" ? activeInfo.detail : \"\",\n    });\n  }, [activeSectionKey]);\n\n  useEffect(() => {\n    setActiveInformation(information[sections[activeSectionKey]]);\n  }, [information]);\n\n  useEffect(() => {\n    const details = activeInformation?.details;\n    if (!details) return;\n\n    const activeInfo = information[sections[activeSectionKey]];\n    setValues({\n      overview: activeInfo.details[activeDetailIndex]?.overview || \"\",\n      link: activeInfo.details[activeDetailIndex]?.link || \"\",\n      certificationLink:\n        activeInfo.details[activeDetailIndex]?.certificationLink || \"\",\n      companyName: activeInfo.details[activeDetailIndex]?.companyName || \"\",\n      location: activeInfo.details[activeDetailIndex]?.location || \"\",\n      startDate: activeInfo.details[activeDetailIndex]?.startDate || \"\",\n      endDate: activeInfo.details[activeDetailIndex]?.endDate || \"\",\n      points: activeInfo.details[activeDetailIndex]?.points || \"\",\n      title: activeInfo.details[activeDetailIndex]?.title || \"\",\n      linkedin: activeInfo.details[activeDetailIndex]?.linkedin || \"\",\n      github: activeInfo.details[activeDetailIndex]?.github || \"\",\n      college: activeInfo.details[activeDetailIndex]?.college || \"\",\n    });\n  }, [activeDetailIndex]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        {Object.keys(sections)?.map((key) => (\n          <div\n            className={`${styles.section} ${\n              activeSectionKey === key ? styles.active : \"\"\n            }`}\n            key={key}\n            onClick={() => setActiveSectionKey(key)}\n          >\n            {sections[key]}\n          </div>\n        ))}\n      </div>\n\n      <div className={styles.body}>\n        <InputControl\n          label=\"Title\"\n          placeholder=\"Enter section title\"\n          value={sectionTitle}\n          onChange={(event) => setSectionTitle(event.target.value)}\n        />\n\n        <div className={styles.chips}>\n          {activeInformation?.details\n            ? activeInformation?.details?.map((item, index) => (\n                <div\n                  className={`${styles.chip} ${\n                    activeDetailIndex === index ? styles.active : \"\"\n                  }`}\n                  key={item.title + index}\n                  onClick={() => setActiveDetailIndex(index)}\n                >\n                  <p>\n                    {sections[activeSectionKey]} {index + 1}\n                  </p>\n                  <X\n                    onClick={(event) => {\n                      event.stopPropagation();\n                      handleDeleteDetail(index);\n                    }}\n                  />\n                </div>\n              ))\n            : \"\"}\n          {activeInformation?.details &&\n          activeInformation?.details?.length > 0 ? (\n            <div className={styles.new} onClick={handleAddNew}>\n              +New\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        {generateBody()}\n\n        <button onClick={handleSubmission}>Save</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Editor;\n","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\InputControl\\InputControl.js",[],"C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\Resume\\Resume.js",["130","131","132","133","134","135"],"import React, { forwardRef, useEffect, useRef, useState } from \"react\";\nimport {\n  AtSign,\n  Calendar,\n  GitHub,\n  Linkedin,\n  MapPin,\n  Paperclip,\n  Phone,\n} from \"react-feather\";\n\nimport styles from \"./Resume.module.css\";\n\nconst Resume = forwardRef((props, ref) => {\n  const information = props.information;\n  const sections = props.sections;\n  const containerRef = useRef();\n\n  const [columns, setColumns] = useState([[], []]);\n  const [source, setSource] = useState(\"\");\n  const [target, seTarget] = useState(\"\");\n\n  const info = {\n    workExp: information[sections.workExp],\n    project: information[sections.project],\n    achievement: information[sections.achievement],\n    education: information[sections.education],\n    basicInfo: information[sections.basicInfo],\n    summary: information[sections.summary],\n    other: information[sections.other],\n  };\n\n  const getFormattedDate = (value) => {\n    if (!value) return \"\";\n    const date = new Date(value);\n\n    return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  };\n\n  const sectionDiv = {\n    [sections.workExp]: (\n      <div\n        key={\"workexp\"}\n        draggable\n        onDragOver={() => seTarget(info.workExp?.id)}\n        onDragEnd={() => setSource(info.workExp?.id)}\n        className={`${styles.section} ${\n          info.workExp?.sectionTitle ? \"\" : styles.hidden\n        }`}\n      >\n        <div className={styles.sectionTitle}>{info.workExp.sectionTitle}</div>\n        <div className={styles.content}>\n          {info.workExp?.details?.map((item) => (\n            <div className={styles.item} key={item.title}>\n              {item.title ? (\n                <p className={styles.title}>{item.title}</p>\n              ) : (\n                <span />\n              )}\n              {item.companyName ? (\n                <p className={styles.subTitle}>{item.companyName}</p>\n              ) : (\n                <span />\n              )}\n              {item.certificationLink ? (\n                <a className={styles.link} href={item.certificationLink}>\n                  <Paperclip />\n                  {item.certificationLink}\n                </a>\n              ) : (\n                <span />\n              )}\n              {item.startDate && item.endDate ? (\n                <div className={styles.date}>\n                  <Calendar /> {getFormattedDate(item.startDate)}-\n                  {getFormattedDate(item.endDate)}\n                </div>\n              ) : (\n                <div />\n              )}\n              {item.location ? (\n                <p className={styles.date}>\n                  <MapPin /> Remote\n                </p>\n              ) : (\n                <span />\n              )}\n              {item.points?.length > 0 ? (\n                <ul className={styles.points}>\n                  {item.points?.map((elem, index) => (\n                    <li className={styles.point} key={elem + index}>\n                      {elem}\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <span />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    ),\n    [sections.project]: (\n      <div\n        key={\"project\"}\n        draggable\n        onDragOver={() => seTarget(info.project?.id)}\n        onDragEnd={() => setSource(info.project?.id)}\n        className={`${styles.section} ${\n          info.project?.sectionTitle ? \"\" : styles.hidden\n        }`}\n      >\n        <div className={styles.sectionTitle}>{info.project.sectionTitle}</div>\n        <div className={styles.content}>\n          {info.project?.details?.map((item) => (\n            <div className={styles.item}>\n              {item.title ? (\n                <p className={styles.title}>{item.title}</p>\n              ) : (\n                <span />\n              )}\n              {item.link ? (\n                <a className={styles.link} href={item.link}>\n                  <Paperclip />\n                  {item.link}\n                </a>\n              ) : (\n                <span />\n              )}\n              {item.github ? (\n                <a className={styles.link} href={item.github}>\n                  <GitHub />\n                  {item.github}\n                </a>\n              ) : (\n                <span />\n              )}\n              {item.overview ? (\n                <p className={styles.overview}>{item.overview} </p>\n              ) : (\n                <span />\n              )}\n              {item.points?.length > 0 ? (\n                <ul className={styles.points}>\n                  {item.points?.map((elem, index) => (\n                    <li className={styles.point} key={elem + index}>\n                      {elem}\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <span />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    ),\n    [sections.education]: (\n      <div\n        key={\"education\"}\n        draggable\n        onDragOver={() => seTarget(info.education?.id)}\n        onDragEnd={() => setSource(info.education?.id)}\n        className={`${styles.section} ${\n          info.education?.sectionTitle ? \"\" : styles.hidden\n        }`}\n      >\n        <div className={styles.sectionTitle}>\n          {info.education?.sectionTitle}\n        </div>\n        <div className={styles.content}>\n          {info.education?.details?.map((item) => (\n            <div className={styles.item}>\n              {item.title ? (\n                <p className={styles.title}>{item.title}</p>\n              ) : (\n                <span />\n              )}\n              {item.college ? (\n                <p className={styles.subTitle}>Some college name</p>\n              ) : (\n                <span />\n              )}\n              {item.startDate && item.endDate ? (\n                <div className={styles.date}>\n                  <Calendar /> {getFormattedDate(item.startDate)} -\n                  {getFormattedDate(item.endDate)}\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    ),\n    [sections.achievement]: (\n      <div\n        key={\"achievement\"}\n        draggable\n        onDragOver={() => seTarget(info.achievement?.id)}\n        onDragEnd={() => setSource(info.achievement?.id)}\n        className={`${styles.section} ${\n          info.achievement?.sectionTitle ? \"\" : styles.hidden\n        }`}\n      >\n        <div className={styles.sectionTitle}>\n          {info.achievement?.sectionTitle}\n        </div>\n        <div className={styles.content}>\n          {info.achievement?.points?.length > 0 ? (\n            <ul className={styles.numbered}>\n              {info.achievement?.points?.map((elem, index) => (\n                <li className={styles.point} key={elem + index}>\n                  {elem}\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <span />\n          )}\n        </div>\n      </div>\n    ),\n    [sections.summary]: (\n      <div\n        key={\"summary\"}\n        draggable\n        onDragOver={() => seTarget(info.summary?.id)}\n        onDragEnd={() => setSource(info.summary?.id)}\n        className={`${styles.section} ${\n          info.summary?.sectionTitle ? \"\" : styles.hidden\n        }`}\n      >\n        <div className={styles.sectionTitle}>{info.summary?.sectionTitle}</div>\n        <div className={styles.content}>\n          <p className={styles.overview}>{info.summary?.detail}</p>\n        </div>\n      </div>\n    ),\n    [sections.other]: (\n      <div\n        key={\"other\"}\n        draggable\n        onDragOver={() => seTarget(info.other?.id)}\n        onDragEnd={() => setSource(info.other?.id)}\n        className={`${styles.section} ${\n          info.other?.sectionTitle ? \"\" : styles.hidden\n        }`}\n      >\n        <div className={styles.sectionTitle}>{info.other?.sectionTitle}</div>\n        <div className={styles.content}>\n          <p className={styles.overview}>{info?.other?.detail}</p>\n        </div>\n      </div>\n    ),\n  };\n\n  const swapSourceTarget = (source, target) => {\n    if (!source || !target) return;\n    const tempColumns = [[...columns[0]], [...columns[1]]];\n\n    let sourceRowIndex = tempColumns[0].findIndex((item) => item === source);\n    let sourceColumnIndex = 0;\n    if (sourceRowIndex < 0) {\n      sourceColumnIndex = 1;\n      sourceRowIndex = tempColumns[1].findIndex((item) => item === source);\n    }\n\n    let targetRowIndex = tempColumns[0].findIndex((item) => item === target);\n    let targetColumnIndex = 0;\n    if (targetRowIndex < 0) {\n      targetColumnIndex = 1;\n      targetRowIndex = tempColumns[1].findIndex((item) => item === target);\n    }\n\n    const tempSource = tempColumns[sourceColumnIndex][sourceRowIndex];\n    tempColumns[sourceColumnIndex][sourceRowIndex] =\n      tempColumns[targetColumnIndex][targetRowIndex];\n\n    tempColumns[targetColumnIndex][targetRowIndex] = tempSource;\n\n    setColumns(tempColumns);\n  };\n\n  useEffect(() => {\n    setColumns([\n      [sections.project, sections.education, sections.summary],\n      [sections.workExp, sections.achievement, sections.other],\n    ]);\n  }, []);\n\n  useEffect(() => {\n    swapSourceTarget(source, target);\n  }, [source]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!props.activeColor || !container) return;\n\n    container.style.setProperty(\"--color\", props.activeColor);\n  }, [props.activeColor]);\n\n  return (\n    <div ref={ref}>\n      <div ref={containerRef} className={styles.container}>\n        <div className={styles.header}>\n          <p className={styles.heading}>{info.basicInfo?.detail?.name}</p>\n          <p className={styles.subHeading}>{info.basicInfo?.detail?.title}</p>\n\n          <div className={styles.links}>\n            {info.basicInfo?.detail?.email ? (\n              <a className={styles.link} type=\"email\">\n                <AtSign /> {info.basicInfo?.detail?.email}\n              </a>\n            ) : (\n              <span />\n            )}\n            {info.basicInfo?.detail?.phone ? (\n              <a className={styles.link}>\n                <Phone /> {info.basicInfo?.detail?.phone}\n              </a>\n            ) : (\n              <span />\n            )}\n            {info.basicInfo?.detail?.linkedin ? (\n              <a className={styles.link}>\n                <Linkedin /> {info.basicInfo?.detail?.linkedin}\n              </a>\n            ) : (\n              <span />\n            )}\n            {info.basicInfo?.detail?.github ? (\n              <a className={styles.link}>\n                <GitHub /> {info.basicInfo?.detail?.github}\n              </a>\n            ) : (\n              <span />\n            )}\n          </div>\n        </div>\n\n        <div className={styles.main}>\n          <div className={styles.col1}>\n            {columns[0].map((item) => sectionDiv[item])}\n          </div>\n          <div className={styles.col2}>\n            {columns[1].map((item) => sectionDiv[item])}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Resume;\n","C:\\Users\\Mansoor3007\\Desktop\\Resume-Builder-master\\src\\components\\Header\\Header.js",[],"C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\index.js",[],["136","137"],"C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\App.js",["138"],"C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\Header\\Header.js",[],"C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\Body\\Body.js",[],"C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\Editor\\Editor.js",["139","140","141","142"],"import React, { useEffect, useState } from \"react\";\nimport { X } from \"react-feather\";\n\nimport InputControl from \"../InputControl/InputControl\";\n\nimport styles from \"./Editor.module.css\";\n\nfunction Editor(props) {\n  const sections = props.sections;\n  const information = props.information;\n\n  const [activeSectionKey, setActiveSectionKey] = useState(\n    Object.keys(sections)[0]\n  );\n  const [activeInformation, setActiveInformation] = useState(\n    information[sections[Object.keys(sections)[0]]]\n  );\n  const [activeDetailIndex, setActiveDetailIndex] = useState(0);\n  const [sectionTitle, setSectionTitle] = useState(\n    sections[Object.keys(sections)[0]]\n  );\n  const [values, setValues] = useState({\n    name: activeInformation?.detail?.name || \"\",\n    Cnic: activeInformation?.detail?.CNIC || \"\",\n    linkedin: activeInformation?.detail?.linkedin || \"\",\n    github: activeInformation?.detail?.github || \"\",\n    Contact: activeInformation?.detail?.Contact || \" \",\n    email: activeInformation?.detail?.email || \"\",\n  });\n\n  const handlePointUpdate = (value, index) => {\n    const tempValues = { ...values };\n    if (!Array.isArray(tempValues.points)) tempValues.points = [];\n    tempValues.points[index] = value;\n    setValues(tempValues);\n  };\n\n  const workExpBody = (\n    <div className={styles.detail}>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Experience\"\n          placeholder=\"Enter title eg. Frontend developer\"\n          value={values.title}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, title: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Company Name\"\n          placeholder=\"Enter company name eg. amazon\"\n          value={values.companyName}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, companyName: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Certificate Link\"\n          placeholder=\"Enter certificate link\"\n          value={values.certificationLink}\n          onChange={(event) =>\n            setValues((prev) => ({\n              ...prev,\n              certificationLink: event.target.value,\n            }))\n          }\n        />\n        <InputControl\n          label=\"Location\"\n          placeholder=\"Enter location eg. Remote\"\n          value={values.location}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, location: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Start Date\"\n          type=\"date\"\n          placeholder=\"Enter start date of work\"\n          value={values.startDate}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, startDate: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"End Date\"\n          type=\"date\"\n          placeholder=\"Enter end date of work\"\n          value={values.endDate}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, endDate: event.target.value }))\n          }\n        />\n      </div>\n\n      <div className={styles.column}>\n        <label>Enter work description</label>\n        <InputControl\n          placeholder=\"Line 1\"\n          value={values.points ? values.points[0] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\n\n\n        />\n      </div>\n    </div>\n  );\n  const projectBody = (\n    <div className={styles.detail}>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Project Name\"\n          value={values.title}\n          placeholder=\"Enter title eg. Chat app\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, title: event.target.value }))\n          }\n        />\n      </div>\n      <InputControl\n        label=\"Project Overview\"\n        value={values.overview}\n        placeholder=\"Enter basic overview of project\"\n        onChange={(event) =>\n          setValues((prev) => ({ ...prev, overview: event.target.value }))\n        }\n      />\n      <div className={styles.row}>\n        <InputControl\n          label=\"Deployed Link\"\n          value={values.link}\n          placeholder=\"Enter deployed link of project\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, link: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Github Link\"\n          value={values.github}\n          placeholder=\"Enter github link of project\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, github: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.column}>\n        <label>Enter project description</label>\n        <InputControl\n          placeholder=\"Line 1\"\n          value={values.points ? values.points[0] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\n\n        />\n      </div>\n    </div>\n  );\n  const educationBody = (\n    <div className={styles.detail}>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Degree Type\"\n          value={values.title}\n          placeholder=\"Enter title eg. Cs\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, title: event.target.value }))\n          }\n        />\n      </div>\n      <InputControl\n        label=\"Institute Name\"\n        value={values.college}\n        placeholder=\"Enter name of your Universty\"\n        onChange={(event) =>\n          setValues((prev) => ({ ...prev, college: event.target.value }))\n        }\n      />\n      <div className={styles.row}>\n        <InputControl\n          label=\"Year Of Completion\"\n          type=\"date\"\n          placeholder=\"Completion Year And Date\"\n          value={values.startDate}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, startDate: event.target.value }))\n          }\n\n        />\n      </div>\n    </div>\n  );\n  const basicInfoBody = (\n    <div className={styles.detail}>\n      <input type=\"file\"></input>\n      <div className={styles.row}>\n\n        <InputControl\n\n          label=\"Your Name\"\n          placeholder=\"Enter your full name \"\n          value={values.name}\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, name: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Cnic No\"\n          value={values.title}\n          placeholder=\"Enter your Cnic No\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, title: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Linkedin Link\"\n          value={values.linkedin}\n          placeholder=\"Enter your linkedin profile link\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, linkedin: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Github Link\"\n          value={values.github}\n          placeholder=\"Enter your github profile link\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, github: event.target.value }))\n          }\n        />\n      </div>\n      <div className={styles.row}>\n        <InputControl\n          label=\"Your Email\"\n          value={values.email}\n          placeholder=\"Enter your email\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, email: event.target.value }))\n          }\n        />\n        <InputControl\n          label=\"Contact No\"\n          value={values.phone}\n          placeholder=\"Enter your Contact number\"\n          onChange={(event) =>\n            setValues((prev) => ({ ...prev, phone: event.target.value }))\n          }\n        />\n      </div>\n    </div>\n  );\n  const achievementsBody = (\n    <div className={styles.detail}>\n      <div className={styles.column}>\n        <label>List your achievements</label>\n        <InputControl\n          placeholder=\"Line 1\"\n          value={values.points ? values.points[0] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\n        />\n        <InputControl\n          placeholder=\"Line 2\"\n          value={values.points ? values.points[1] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\n        />\n        <InputControl\n          placeholder=\"Line 3\"\n          value={values.points ? values.points[2] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\n        />\n        <InputControl\n          placeholder=\"Line 4\"\n          value={values.points ? values.points[3] : \"\"}\n          onChange={(event) => handlePointUpdate(event.target.value, 3)}\n        />\n      </div>\n    </div>\n  );\n  const summaryBody = (\n    <div className={styles.detail}>\n      <InputControl\n        label=\"Summary\"\n        value={values.summary}\n        placeholder=\"Enter your objective/summary\"\n        onChange={(event) =>\n          setValues((prev) => ({ ...prev, summary: event.target.value }))\n        }\n      />\n    </div>\n  );\n  const otherBody = (\n    <div className={styles.detail}>\n      <InputControl\n        label=\"Other\"\n        value={values.other}\n        placeholder=\"Enter something\"\n        onChange={(event) =>\n          setValues((prev) => ({ ...prev, other: event.target.value }))\n        }\n      />\n    </div>\n  );\n\n  const generateBody = () => {\n    switch (sections[activeSectionKey]) {\n      case sections.basicInfo:\n        return basicInfoBody;\n      case sections.workExp:\n        return workExpBody;\n      case sections.project:\n        return projectBody;\n      case sections.education:\n        return educationBody;\n      case sections.achievement:\n        return achievementsBody;\n      case sections.summary:\n        return summaryBody;\n      case sections.other:\n        return otherBody;\n      default:\n        return null;\n    }\n  };\n\n  const handleSubmission = () => {\n    switch (sections[activeSectionKey]) {\n      case sections.basicInfo: {\n        const tempDetail = {\n          name: values.name,\n          title: values.title,\n          linkedin: values.linkedin,\n          github: values.github,\n          email: values.email,\n          phone: values.phone,\n        };\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.basicInfo]: {\n            ...prev[sections.basicInfo],\n            detail: tempDetail,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.workExp: {\n        const tempDetail = {\n          certificationLink: values.certificationLink,\n          title: values.title,\n          startDate: values.startDate,\n          endDate: values.endDate,\n          companyName: values.companyName,\n          location: values.location,\n          points: values.points,\n        };\n        const tempDetails = [...information[sections.workExp]?.details];\n        tempDetails[activeDetailIndex] = tempDetail;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.workExp]: {\n            ...prev[sections.workExp],\n            details: tempDetails,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.project: {\n        const tempDetail = {\n          link: values.link,\n          title: values.title,\n          overview: values.overview,\n          github: values.github,\n          points: values.points,\n        };\n        const tempDetails = [...information[sections.project]?.details];\n        tempDetails[activeDetailIndex] = tempDetail;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.project]: {\n            ...prev[sections.project],\n            details: tempDetails,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.education: {\n        const tempDetail = {\n          title: values.title,\n          college: values.college,\n          startDate: values.startDate,\n          endDate: values.endDate,\n        };\n        const tempDetails = [...information[sections.education]?.details];\n        tempDetails[activeDetailIndex] = tempDetail;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.education]: {\n            ...prev[sections.education],\n            details: tempDetails,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.achievement: {\n        const tempPoints = values.points;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.achievement]: {\n            ...prev[sections.achievement],\n            points: tempPoints,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.summary: {\n        const tempDetail = values.summary;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.summary]: {\n            ...prev[sections.summary],\n            detail: tempDetail,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n      case sections.other: {\n        const tempDetail = values.other;\n\n        props.setInformation((prev) => ({\n          ...prev,\n          [sections.other]: {\n            ...prev[sections.other],\n            detail: tempDetail,\n            sectionTitle,\n          },\n        }));\n        break;\n      }\n    }\n  };\n\n  const handleAddNew = () => {\n    const details = activeInformation?.details;\n    if (!details) return;\n    const lastDetail = details.slice(-1)[0];\n    if (!Object.keys(lastDetail).length) return;\n    details?.push({});\n\n    props.setInformation((prev) => ({\n      ...prev,\n      [sections[activeSectionKey]]: {\n        ...information[sections[activeSectionKey]],\n        details: details,\n      },\n    }));\n    setActiveDetailIndex(details?.length - 1);\n  };\n\n  const handleDeleteDetail = (index) => {\n    const details = activeInformation?.details\n      ? [...activeInformation?.details]\n      : \"\";\n    if (!details) return;\n    details.splice(index, 1);\n    props.setInformation((prev) => ({\n      ...prev,\n      [sections[activeSectionKey]]: {\n        ...information[sections[activeSectionKey]],\n        details: details,\n      },\n    }));\n\n    setActiveDetailIndex((prev) => (prev === index ? 0 : prev - 1));\n  };\n\n  useEffect(() => {\n    const activeInfo = information[sections[activeSectionKey]];\n    setActiveInformation(activeInfo);\n    setSectionTitle(sections[activeSectionKey]);\n    setActiveDetailIndex(0);\n    setValues({\n      name: activeInfo?.detail?.name || \"\",\n      overview: activeInfo?.details\n        ? activeInfo.details[0]?.overview || \"\"\n        : \"\",\n      link: activeInfo?.details ? activeInfo.details[0]?.link || \"\" : \"\",\n      certificationLink: activeInfo?.details\n        ? activeInfo.details[0]?.certificationLink || \"\"\n        : \"\",\n      companyName: activeInfo?.details\n        ? activeInfo.details[0]?.companyName || \"\"\n        : \"\",\n      college: activeInfo?.details\n        ? activeInfo.details[0]?.college || \"\"\n        : \"\",\n      location: activeInfo?.details\n        ? activeInfo.details[0]?.location || \"\"\n        : \"\",\n      startDate: activeInfo?.details\n        ? activeInfo.details[0]?.startDate || \"\"\n        : \"\",\n      endDate: activeInfo?.details ? activeInfo.details[0]?.endDate || \"\" : \"\",\n      points: activeInfo?.details\n        ? activeInfo.details[0]?.points\n          ? [...activeInfo.details[0]?.points]\n          : \"\"\n        : activeInfo?.points\n          ? [...activeInfo.points]\n          : \"\",\n      title: activeInfo?.details\n        ? activeInfo.details[0]?.title || \"\"\n        : activeInfo?.detail?.title || \"\",\n      linkedin: activeInfo?.detail?.linkedin || \"\",\n      github: activeInfo?.details\n        ? activeInfo.details[0]?.github || \"\"\n        : activeInfo?.detail?.github || \"\",\n      phone: activeInfo?.detail?.phone || \"\",\n      email: activeInfo?.detail?.email || \"\",\n      summary: typeof activeInfo?.detail !== \"object\" ? activeInfo.detail : \"\",\n      other: typeof activeInfo?.detail !== \"object\" ? activeInfo.detail : \"\",\n    });\n  }, [activeSectionKey]);\n\n  useEffect(() => {\n    setActiveInformation(information[sections[activeSectionKey]]);\n  }, [information]);\n\n  useEffect(() => {\n    const details = activeInformation?.details;\n    if (!details) return;\n\n    const activeInfo = information[sections[activeSectionKey]];\n    setValues({\n      overview: activeInfo.details[activeDetailIndex]?.overview || \"\",\n      link: activeInfo.details[activeDetailIndex]?.link || \"\",\n      certificationLink:\n        activeInfo.details[activeDetailIndex]?.certificationLink || \"\",\n      companyName: activeInfo.details[activeDetailIndex]?.companyName || \"\",\n      location: activeInfo.details[activeDetailIndex]?.location || \"\",\n      startDate: activeInfo.details[activeDetailIndex]?.startDate || \"\",\n      endDate: activeInfo.details[activeDetailIndex]?.endDate || \"\",\n      points: activeInfo.details[activeDetailIndex]?.points || \"\",\n      title: activeInfo.details[activeDetailIndex]?.title || \"\",\n      linkedin: activeInfo.details[activeDetailIndex]?.linkedin || \"\",\n      github: activeInfo.details[activeDetailIndex]?.github || \"\",\n      college: activeInfo.details[activeDetailIndex]?.college || \"\",\n    });\n  }, [activeDetailIndex]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        {Object.keys(sections)?.map((key) => (\n          <div\n            className={`${styles.section} ${activeSectionKey === key ? styles.active : \"\"\n              }`}\n            key={key}\n            onClick={() => setActiveSectionKey(key)}\n          >\n            {sections[key]}\n          </div>\n        ))}\n      </div>\n\n      <div className={styles.body}>\n        <InputControl\n\n          placeholder=\"Enter section title\"\n          value={sectionTitle}\n          onChange={(event) => setSectionTitle(event.target.value)}\n        />\n\n        <div className={styles.chips}>\n          {activeInformation?.details\n            ? activeInformation?.details?.map((item, index) => (\n              <div\n                className={`${styles.chip} ${activeDetailIndex === index ? styles.active : \"\"\n                  }`}\n                key={item.title + index}\n                onClick={() => setActiveDetailIndex(index)}\n              >\n                <p>\n                  {sections[activeSectionKey]} {index + 1}\n                </p>\n                <X\n                  onClick={(event) => {\n                    event.stopPropagation();\n                    handleDeleteDetail(index);\n                  }}\n                />\n              </div>\n            ))\n            : \"\"}\n          {activeInformation?.details &&\n            activeInformation?.details?.length > 0 ? (\n            <div className={styles.new} onClick={handleAddNew}>\n              +New\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        {generateBody()}\n\n        <button onClick={handleSubmission}>Save</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Editor;\n","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\Resume\\Resume.js",["143","144","145","146","147","148"],"import React, { forwardRef, useEffect, useRef, useState } from \"react\";\nimport {\n  AtSign,\n  Calendar,\n  GitHub,\n  Linkedin,\n  MapPin,\n  Paperclip,\n  Phone,\n} from \"react-feather\";\n\nimport styles from \"./Resume.module.css\";\n\nconst Resume = forwardRef((props, ref) => {\n  const information = props.information;\n  const sections = props.sections;\n  const containerRef = useRef();\n\n  const [columns, setColumns] = useState([[], []]);\n  const [source, setSource] = useState(\"\");\n  const [target, seTarget] = useState(\"\");\n\n  const info = {\n    workExp: information[sections.workExp],\n    project: information[sections.project],\n    achievement: information[sections.achievement],\n    education: information[sections.education],\n    basicInfo: information[sections.basicInfo],\n    summary: information[sections.summary],\n    other: information[sections.other],\n  };\n\n  const getFormattedDate = (value) => {\n    if (!value) return \"\";\n    const date = new Date(value);\n\n    return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  };\n\n  const sectionDiv = {\n    [sections.workExp]: (\n      <div\n        key={\"workexp\"}\n        draggable\n        onDragOver={() => seTarget(info.workExp?.id)}\n        onDragEnd={() => setSource(info.workExp?.id)}\n        className={`${styles.section} ${info.workExp?.sectionTitle ? \"\" : styles.hidden\n          }`}\n      >\n        <div className={styles.sectionTitle}>{info.workExp.sectionTitle}</div>\n        <div className={styles.content}>\n          {info.workExp?.details?.map((item) => (\n            <div className={styles.item} key={item.title}>\n              {item.title ? (\n                <p className={styles.title}>{item.title}</p>\n              ) : (\n                <span />\n              )}\n              {item.companyName ? (\n                <p className={styles.subTitle}>{item.companyName}</p>\n              ) : (\n                <span />\n              )}\n              {item.certificationLink ? (\n                <a className={styles.link} href={item.certificationLink}>\n                  <Paperclip />\n                  {item.certificationLink}\n                </a>\n              ) : (\n                <span />\n              )}\n              {item.startDate && item.endDate ? (\n                <div className={styles.date}>\n                  <Calendar /> {getFormattedDate(item.startDate)}-\n                  {getFormattedDate(item.endDate)}\n                </div>\n              ) : (\n                <div />\n              )}\n              {item.location ? (\n                <p className={styles.date}>\n                  <MapPin /> Remote\n                </p>\n              ) : (\n                <span />\n              )}\n              {item.points?.length > 0 ? (\n                <ul className={styles.points}>\n                  {item.points?.map((elem, index) => (\n                    <li className={styles.point} key={elem + index}>\n                      {elem}\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <span />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    ),\n    [sections.project]: (\n      <div\n        key={\"project\"}\n        draggable\n        onDragOver={() => seTarget(info.project?.id)}\n        onDragEnd={() => setSource(info.project?.id)}\n        className={`${styles.section} ${info.project?.sectionTitle ? \"\" : styles.hidden\n          }`}\n      >\n        <div className={styles.sectionTitle}>{info.project.sectionTitle}</div>\n        <div className={styles.content}>\n          {info.project?.details?.map((item) => (\n            <div className={styles.item}>\n              {item.title ? (\n                <p className={styles.title}>{item.title}</p>\n              ) : (\n                <span />\n              )}\n              {item.link ? (\n                <a className={styles.link} href={item.link}>\n                  <Paperclip />\n                  {item.link}\n                </a>\n              ) : (\n                <span />\n              )}\n              {item.github ? (\n                <a className={styles.link} href={item.github}>\n                  <GitHub />\n                  {item.github}\n                </a>\n              ) : (\n                <span />\n              )}\n              {item.overview ? (\n                <p className={styles.overview}>{item.overview} </p>\n              ) : (\n                <span />\n              )}\n              {item.points?.length > 0 ? (\n                <ul className={styles.points}>\n                  {item.points?.map((elem, index) => (\n                    <li className={styles.point} key={elem + index}>\n                      {elem}\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <span />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    ),\n    [sections.education]: (\n      <div\n        key={\"education\"}\n        draggable\n        onDragOver={() => seTarget(info.education?.id)}\n        onDragEnd={() => setSource(info.education?.id)}\n        className={`${styles.section} ${info.education?.sectionTitle ? \"\" : styles.hidden\n          }`}\n      >\n        <div className={styles.sectionTitle}>\n          {info.education?.sectionTitle}\n        </div>\n        <div className={styles.content}>\n          {info.education?.details?.map((item) => (\n            <div className={styles.item}>\n              {item.title ? (\n                <p className={styles.title}>{item.title}</p>\n              ) : (\n                <span />\n              )}\n              {item.college ? (\n                <p className={styles.subTitle}>{item.college}</p>\n              ) : (\n                <span />\n              )}\n              {item.startDate && item.endDate ? (\n                <div className={styles.date}>\n                  <Calendar /> {getFormattedDate(item.startDate)} -\n                  {getFormattedDate(item.endDate)}\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    ),\n    [sections.achievement]: (\n      <div\n        key={\"achievement\"}\n        draggable\n        onDragOver={() => seTarget(info.achievement?.id)}\n        onDragEnd={() => setSource(info.achievement?.id)}\n        className={`${styles.section} ${info.achievement?.sectionTitle ? \"\" : styles.hidden\n          }`}\n      >\n        <div className={styles.sectionTitle}>\n          {info.achievement?.sectionTitle}\n        </div>\n        <div className={styles.content}>\n          {info.achievement?.points?.length > 0 ? (\n            <ul className={styles.numbered}>\n              {info.achievement?.points?.map((elem, index) => (\n                <li className={styles.point} key={elem + index}>\n                  {elem}\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <span />\n          )}\n        </div>\n      </div>\n    ),\n    [sections.summary]: (\n      <div\n        key={\"summary\"}\n        draggable\n        onDragOver={() => seTarget(info.summary?.id)}\n        onDragEnd={() => setSource(info.summary?.id)}\n        className={`${styles.section} ${info.summary?.sectionTitle ? \"\" : styles.hidden\n          }`}\n      >\n        <div className={styles.sectionTitle}>{info.summary?.sectionTitle}</div>\n        <div className={styles.content}>\n          <p className={styles.overview}>{info.summary?.detail}</p>\n        </div>\n      </div>\n    ),\n    [sections.other]: (\n      <div\n        key={\"other\"}\n        draggable\n        onDragOver={() => seTarget(info.other?.id)}\n        onDragEnd={() => setSource(info.other?.id)}\n        className={`${styles.section} ${info.other?.sectionTitle ? \"\" : styles.hidden\n          }`}\n      >\n        <div className={styles.sectionTitle}>{info.other?.sectionTitle}</div>\n        <div className={styles.content}>\n          <p className={styles.overview}>{info?.other?.detail}</p>\n        </div>\n      </div>\n    ),\n  };\n\n  const swapSourceTarget = (source, target) => {\n    if (!source || !target) return;\n    const tempColumns = [[...columns[0]], [...columns[1]]];\n\n    let sourceRowIndex = tempColumns[0].findIndex((item) => item === source);\n    let sourceColumnIndex = 0;\n    if (sourceRowIndex < 0) {\n      sourceColumnIndex = 1;\n      sourceRowIndex = tempColumns[1].findIndex((item) => item === source);\n    }\n\n    let targetRowIndex = tempColumns[0].findIndex((item) => item === target);\n    let targetColumnIndex = 0;\n    if (targetRowIndex < 0) {\n      targetColumnIndex = 1;\n      targetRowIndex = tempColumns[1].findIndex((item) => item === target);\n    }\n\n    const tempSource = tempColumns[sourceColumnIndex][sourceRowIndex];\n    tempColumns[sourceColumnIndex][sourceRowIndex] =\n      tempColumns[targetColumnIndex][targetRowIndex];\n\n    tempColumns[targetColumnIndex][targetRowIndex] = tempSource;\n\n    setColumns(tempColumns);\n  };\n\n  useEffect(() => {\n    setColumns([\n      [sections.project, sections.education, sections.summary],\n      [sections.workExp, sections.achievement, sections.other],\n    ]);\n  }, []);\n\n  useEffect(() => {\n    swapSourceTarget(source, target);\n  }, [source]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!props.activeColor || !container) return;\n\n    container.style.setProperty(\"--color\", props.activeColor);\n  }, [props.activeColor]);\n\n  return (\n    <div ref={ref}>\n      <div ref={containerRef} className={styles.container}>\n        <div className={styles.header}>\n          <p className={styles.heading}>{info.basicInfo?.detail?.name}</p>\n          <p className={styles.subHeading}>{info.basicInfo?.detail?.title}</p>\n\n          <div className={styles.links}>\n            {info.basicInfo?.detail?.email ? (\n              <a className={styles.link} type=\"email\">\n                <AtSign /> {info.basicInfo?.detail?.email}\n              </a>\n            ) : (\n              <span />\n            )}\n            {info.basicInfo?.detail?.phone ? (\n              <a className={styles.link}>\n                <Phone /> {info.basicInfo?.detail?.phone}\n              </a>\n            ) : (\n              <span />\n            )}\n            {info.basicInfo?.detail?.linkedin ? (\n              <a className={styles.link}>\n                <Linkedin /> {info.basicInfo?.detail?.linkedin}\n              </a>\n            ) : (\n              <span />\n            )}\n            {info.basicInfo?.detail?.github ? (\n              <a className={styles.link}>\n                <GitHub /> {info.basicInfo?.detail?.github}\n              </a>\n            ) : (\n              <span />\n            )}\n          </div>\n        </div>\n\n        <div className={styles.main}>\n          <div className={styles.col1}>\n            {columns[0].map((item) => sectionDiv[item])}\n          </div>\n          <div className={styles.col2}>\n            {columns[1].map((item) => sectionDiv[item])}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Resume;\n","C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\InputControl\\InputControl.js",[],"C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\UserSign\\SignIn.js",["149","150"],"C:\\Users\\Mansoor3007\\Desktop\\resume-builder-master\\src\\components\\UserSign\\Register.js",["151","152"],"W:\\FYP\\resume assisted\\src\\index.js",[],[],"W:\\FYP\\resume assisted\\src\\App.js",["153"],[],"W:\\FYP\\resume assisted\\src\\components\\Header\\Header.js",[],[],"W:\\FYP\\resume assisted\\src\\components\\Body\\Body.js",[],[],"W:\\FYP\\resume assisted\\src\\components\\UserSign\\SignIn.js",["154","155"],[],"W:\\FYP\\resume assisted\\src\\components\\UserSign\\Register.js",["156","157","158","159"],[],"W:\\FYP\\resume assisted\\src\\components\\Editor\\Editor.js",["160","161","162","163"],[],"W:\\FYP\\resume assisted\\src\\components\\Resume\\Resume.js",["164","165","166","167","168","169"],[],"W:\\FYP\\resume assisted\\src\\components\\InputControl\\InputControl.js",[],[],"W:\\FYP\\resume assisted\\src\\components\\adminlogin\\admin.js",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":357,"column":5,"nodeType":"176","messageId":"177","endLine":481,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":564,"column":6,"nodeType":"180","endLine":564,"endColumn":24,"suggestions":"181"},{"ruleId":"178","severity":1,"message":"182","line":568,"column":6,"nodeType":"180","endLine":568,"endColumn":19,"suggestions":"183"},{"ruleId":"178","severity":1,"message":"184","line":590,"column":6,"nodeType":"180","endLine":590,"endColumn":25,"suggestions":"185"},{"ruleId":"178","severity":1,"message":"186","line":293,"column":6,"nodeType":"180","endLine":293,"endColumn":8,"suggestions":"187"},{"ruleId":"178","severity":1,"message":"188","line":297,"column":6,"nodeType":"180","endLine":297,"endColumn":14,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":315,"column":15,"nodeType":"192","endLine":315,"endColumn":55},{"ruleId":"190","severity":1,"message":"191","line":322,"column":15,"nodeType":"192","endLine":322,"endColumn":42},{"ruleId":"190","severity":1,"message":"191","line":329,"column":15,"nodeType":"192","endLine":329,"endColumn":42},{"ruleId":"190","severity":1,"message":"191","line":336,"column":15,"nodeType":"192","endLine":336,"endColumn":42},{"ruleId":"170","replacedBy":"193"},{"ruleId":"172","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":2,"column":50,"nodeType":"197","messageId":"198","endLine":2,"endColumn":54},{"ruleId":"174","severity":1,"message":"175","line":330,"column":5,"nodeType":"176","messageId":"177","endLine":454,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":537,"column":6,"nodeType":"180","endLine":537,"endColumn":24,"suggestions":"199"},{"ruleId":"178","severity":1,"message":"182","line":541,"column":6,"nodeType":"180","endLine":541,"endColumn":19,"suggestions":"200"},{"ruleId":"178","severity":1,"message":"184","line":563,"column":6,"nodeType":"180","endLine":563,"endColumn":25,"suggestions":"201"},{"ruleId":"178","severity":1,"message":"186","line":287,"column":6,"nodeType":"180","endLine":287,"endColumn":8,"suggestions":"202"},{"ruleId":"178","severity":1,"message":"188","line":291,"column":6,"nodeType":"180","endLine":291,"endColumn":14,"suggestions":"203"},{"ruleId":"190","severity":1,"message":"191","line":309,"column":15,"nodeType":"192","endLine":309,"endColumn":55},{"ruleId":"190","severity":1,"message":"191","line":316,"column":15,"nodeType":"192","endLine":316,"endColumn":42},{"ruleId":"190","severity":1,"message":"191","line":323,"column":15,"nodeType":"192","endLine":323,"endColumn":42},{"ruleId":"190","severity":1,"message":"191","line":330,"column":15,"nodeType":"192","endLine":330,"endColumn":42},{"ruleId":"190","severity":1,"message":"204","line":14,"column":21,"nodeType":"192","endLine":14,"endColumn":50},{"ruleId":"205","severity":1,"message":"206","line":18,"column":21,"nodeType":"192","endLine":18,"endColumn":40},{"ruleId":"205","severity":1,"message":"206","line":11,"column":21,"nodeType":"192","endLine":11,"endColumn":46},{"ruleId":"190","severity":1,"message":"204","line":20,"column":21,"nodeType":"192","endLine":20,"endColumn":50},{"ruleId":"195","severity":1,"message":"196","line":2,"column":50,"nodeType":"197","messageId":"198","endLine":2,"endColumn":54},{"ruleId":"190","severity":1,"message":"204","line":14,"column":21,"nodeType":"192","endLine":14,"endColumn":50},{"ruleId":"205","severity":1,"message":"206","line":18,"column":21,"nodeType":"192","endLine":18,"endColumn":40},{"ruleId":"195","severity":1,"message":"207","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"208","line":4,"column":16,"nodeType":"197","messageId":"198","endLine":4,"endColumn":26},{"ruleId":"205","severity":1,"message":"206","line":34,"column":21,"nodeType":"192","endLine":34,"endColumn":46},{"ruleId":"190","severity":1,"message":"204","line":43,"column":21,"nodeType":"192","endLine":43,"endColumn":50},{"ruleId":"174","severity":1,"message":"175","line":330,"column":5,"nodeType":"176","messageId":"177","endLine":454,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":537,"column":6,"nodeType":"180","endLine":537,"endColumn":24,"suggestions":"209"},{"ruleId":"178","severity":1,"message":"182","line":541,"column":6,"nodeType":"180","endLine":541,"endColumn":19,"suggestions":"210"},{"ruleId":"178","severity":1,"message":"184","line":563,"column":6,"nodeType":"180","endLine":563,"endColumn":25,"suggestions":"211"},{"ruleId":"178","severity":1,"message":"186","line":287,"column":6,"nodeType":"180","endLine":287,"endColumn":8,"suggestions":"212"},{"ruleId":"178","severity":1,"message":"188","line":291,"column":6,"nodeType":"180","endLine":291,"endColumn":14,"suggestions":"213"},{"ruleId":"190","severity":1,"message":"191","line":309,"column":15,"nodeType":"192","endLine":309,"endColumn":55},{"ruleId":"190","severity":1,"message":"191","line":316,"column":15,"nodeType":"192","endLine":316,"endColumn":42},{"ruleId":"190","severity":1,"message":"191","line":323,"column":15,"nodeType":"192","endLine":323,"endColumn":42},{"ruleId":"190","severity":1,"message":"191","line":330,"column":15,"nodeType":"192","endLine":330,"endColumn":42},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'information' and 'sections'. Either include them or remove the dependency array.","ArrayExpression",["216"],"React Hook useEffect has missing dependencies: 'activeSectionKey' and 'sections'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setActiveInformation' needs the current value of 'activeSectionKey'.",["217"],"React Hook useEffect has missing dependencies: 'activeInformation?.details', 'activeSectionKey', 'information', and 'sections'. Either include them or remove the dependency array.",["218"],"React Hook useEffect has missing dependencies: 'sections.achievement', 'sections.education', 'sections.other', 'sections.project', 'sections.summary', and 'sections.workExp'. Either include them or remove the dependency array.",["219"],"React Hook useEffect has missing dependencies: 'swapSourceTarget' and 'target'. Either include them or remove the dependency array.",["220"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["214"],["215"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar",["221"],["222"],["223"],["224"],["225"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useState' is defined but never used.","'useHistory' is defined but never used.",["226"],["227"],["228"],["229"],["230"],"no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},{"desc":"231","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"231","fix":"240"},{"desc":"231","fix":"241"},{"desc":"234","fix":"242"},{"desc":"236","fix":"243"},{"desc":"238","fix":"244"},{"desc":"231","fix":"245"},{"desc":"231","fix":"246"},{"desc":"234","fix":"247"},{"desc":"236","fix":"248"},{"desc":"238","fix":"249"},"Update the dependencies array to be: [activeSectionKey, information, sections]",{"range":"250","text":"251"},{"range":"252","text":"251"},"Update the dependencies array to be: [activeDetailIndex, activeInformation?.details, activeSectionKey, information, sections]",{"range":"253","text":"254"},"Update the dependencies array to be: [sections.achievement, sections.education, sections.other, sections.project, sections.summary, sections.workExp]",{"range":"255","text":"256"},"Update the dependencies array to be: [source, swapSourceTarget, target]",{"range":"257","text":"258"},{"range":"259","text":"251"},{"range":"260","text":"251"},{"range":"261","text":"254"},{"range":"262","text":"256"},{"range":"263","text":"258"},{"range":"264","text":"251"},{"range":"265","text":"251"},{"range":"266","text":"254"},{"range":"267","text":"256"},{"range":"268","text":"258"},[17288,17306],"[activeSectionKey, information, sections]",[17402,17415],[18467,18486],"[activeDetailIndex, activeInformation?.details, activeSectionKey, information, sections]",[9142,9144],"[sections.achievement, sections.education, sections.other, sections.project, sections.summary, sections.workExp]",[9211,9219],"[source, swapSourceTarget, target]",[16072,16090],[16186,16199],[17251,17270],[9085,9087],[9154,9162],[16072,16090],[16186,16199],[17251,17270],[9085,9087],[9154,9162]]